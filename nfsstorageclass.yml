---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: nfs-pod-provisioner-sa
  namespace: kube-system
---
kind: ClusterRole # Role of kubernetes
apiVersion: rbac.authorization.k8s.io/v1 # auth API
metadata:
  name: nfs-provisioner-clusterRole
rules:
  - apiGroups: [""] # rules on persistentvolumes
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "delete"]
  - apiGroups: [""] # rules on persistentvolumes
    resources: ["persistentvolumeclaims"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["create", "update", "patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nfs-provisioner-rolebinding
subjects:
  - kind: ServiceAccount
    name: nfs-pod-provisioner-sa # defined on top of file
    namespace: kube-system
roleRef: # binding cluster role to service account
  kind: ClusterRole
  name: nfs-provisioner-clusterRole # name defined in clusterRole
  apiGroup: rbac.authorization.k8s.io
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nfs-pod-provisioner-otherRoles
  namespace: kube-system
rules:
  - apiGroups: [""]
    resources: ["endpoints"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: nfs-pod-provisioner-otherRoles
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: nfs-pod-provisioner-sa # same as top of the file
    # replace with namespace where provisioner is deployed
    namespace: kube-system
roleRef:
  kind: Role
  name: nfs-pod-provisioner-otherRoles
  apiGroup: rbac.authorization.k8s.io
  
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: nfs-pod-provisioner
  namespace: kube-system
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nfs-pod-provisioner
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: nfs-pod-provisioner
    spec:
      serviceAccountName: nfs-pod-provisioner-sa # name of service account created in rbac.yaml
      containers:
        - name: nfs-pod-provisioner
          image: rkevin/nfs-subdir-external-provisioner:fix-k8s-1.20
          volumeMounts:
            - name: nfs-provisioner-v
              mountPath: /persistentvolumes
          env:
            - name: PROVISIONER_NAME # do not change
              value: nfs-provisioner # SAME AS PROVISONER NAME VALUE IN STORAGECLASS
            - name: NFS_SERVER # do not change
              value: 172.31.37.244 # Ip of the NFS SERVER
            - name: NFS_PATH # do not change
              value: /mnt/nfs_share # path to nfs directory setup
      volumes:
       - name: nfs-provisioner-v # same as volumemouts name
         nfs:
           server: 172.31.37.244 # Ip of the NFS SERVER
           path:  /mnt/nfs_share   # Path of volume in NFS Server
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: nfs-storageclass # IMPORTANT pvc needs to mention this name
  annotations:
    storageclass.kubernetes.io/is-default-class: "true" # setting up as default storage class
provisioner: nfs-provisioner # name can be anything
parameters:
  archiveOnDelete: "false"


---

This YAML configuration sets up an NFS (Network File System) provisioner in a Kubernetes cluster, allowing dynamic provisioning of NFS-backed Persistent Volumes (PVs). Hereâ€™s a brief overview of the components defined in this YAML file:

ServiceAccount:
Defines a ServiceAccount named nfs-pod-provisioner-sa in the kube-system namespace.

ClusterRole:
Creates a ClusterRole nfs-provisioner-clusterRole with permissions to manage persistent volumes, persistent volume claims, storage classes, and events.

ClusterRoleBinding:
Binds the nfs-provisioner-clusterRole ClusterRole to the nfs-pod-provisioner-sa ServiceAccount.

Role:
Defines a Role nfs-pod-provisioner-otherRoles in the kube-system namespace with permissions to manage endpoints.

RoleBinding:
Binds the nfs-pod-provisioner-otherRoles Role to the nfs-pod-provisioner-sa ServiceAccount.

Deployment:
Creates a Deployment named nfs-pod-provisioner in the kube-system namespace. This deployment uses the Docker image rkevin/nfs-subdir-external-provisioner:fix-k8s-1.20 and sets up necessary environment variables and volume mounts to connect to the NFS server.

StorageClass:
Defines a StorageClass named nfs-storageclass which uses the nfs-provisioner provisioner. This class is set as the default storage class for the cluster.

Key Points:
ServiceAccount: nfs-pod-provisioner-sa ensures that the provisioner pod has the necessary permissions.
ClusterRole and ClusterRoleBinding: Grants cluster-wide permissions for managing PVs and PVCs.
Role and RoleBinding: Grants namespace-specific permissions for managing endpoints.
Deployment: Defines the NFS provisioner pod which will handle dynamic provisioning of NFS PVs.
StorageClass: Allows PVCs to request NFS-backed storage using nfs-storageclass.


Environment Variables:
PROVISIONER_NAME: Should match the provisioner name used in the StorageClass.
NFS_SERVER: IP address of the NFS server.
NFS_PATH: Path on the NFS server where volumes are stored.


Usage:
Deploy this configuration to set up NFS dynamic provisioning in your Kubernetes cluster.
Create PVCs that reference the nfs-storageclass to dynamically provision NFS-backed PVs.
Make sure to replace the NFS server IP (172.31.37.244) and NFS path (/mnt/nfs_share) with your actual NFS server details.








